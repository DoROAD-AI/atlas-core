basePath: /v2
definitions:
  v1.CapitalInfo:
    properties:
      latlng:
        example:
        - 38.8951
        - 77.0364
        items:
          type: number
        type: array
    type: object
  v1.Car:
    properties:
      side:
        example: right
        type: string
      signs:
        example:
        - USA
        items:
          type: string
        type: array
    type: object
  v1.CoatOfArms:
    properties:
      png:
        example: https://mainfacts.com/media/images/coats_of_arms/us.png
        type: string
      svg:
        example: https://mainfacts.com/media/images/coats_of_arms/us.svg
        type: string
    type: object
  v1.Country:
    properties:
      altSpellings:
        items:
          type: string
        type: array
      area:
        example: 9372610
        type: number
      borders:
        items:
          type: string
        type: array
      capital:
        example:
        - Washington
        - ' D.C.'
        items:
          type: string
        type: array
      capitalInfo:
        $ref: '#/definitions/v1.CapitalInfo'
      car:
        $ref: '#/definitions/v1.Car'
      cca2:
        example: US
        type: string
      cca3:
        example: USA
        type: string
      ccn3:
        example: "840"
        type: string
      cioc:
        example: USA
        type: string
      coatOfArms:
        $ref: '#/definitions/v1.CoatOfArms'
      continents:
        items:
          type: string
        type: array
      currencies:
        $ref: '#/definitions/v1.Currencies'
      demonyms:
        $ref: '#/definitions/v1.Demonyms'
      fifa:
        example: USA
        type: string
      flag:
        example: "\U0001F1FA\U0001F1F8"
        type: string
      flags:
        $ref: '#/definitions/v1.Flags'
      gini:
        additionalProperties:
          type: number
        type: object
      idd:
        $ref: '#/definitions/v1.IDD'
      independent:
        example: true
        type: boolean
      landlocked:
        example: false
        type: boolean
      languages:
        additionalProperties:
          type: string
        type: object
      latlng:
        items:
          type: number
        type: array
      maps:
        $ref: '#/definitions/v1.Maps'
      name:
        $ref: '#/definitions/v1.Name'
      population:
        example: 334805269
        type: integer
      postalCode:
        $ref: '#/definitions/v1.PostalCode'
      region:
        example: Americas
        type: string
      startOfWeek:
        example: sunday
        type: string
      status:
        example: officially-assigned
        type: string
      subregion:
        example: North America
        type: string
      timezones:
        items:
          type: string
        type: array
      tld:
        items:
          type: string
        type: array
      translations:
        additionalProperties:
          properties:
            common:
              type: string
            official:
              type: string
          type: object
        type: object
      unMember:
        example: true
        type: boolean
    type: object
  v1.Currencies:
    additionalProperties:
      $ref: '#/definitions/v1.CurrencyInfo'
    type: object
  v1.CurrencyInfo:
    properties:
      name:
        example: US Dollar
        type: string
      symbol:
        example: $
        type: string
    type: object
  v1.DemonymInfo:
    properties:
      f:
        example: American
        type: string
      m:
        example: American
        type: string
    type: object
  v1.Demonyms:
    properties:
      eng:
        $ref: '#/definitions/v1.DemonymInfo'
      fra:
        $ref: '#/definitions/v1.DemonymInfo'
    type: object
  v1.ErrorResponse:
    properties:
      message:
        example: Bad request
        type: string
    type: object
  v1.Flags:
    properties:
      alt:
        example: Flag of the United States
        type: string
      png:
        example: https://restcountries.eu/data/usa.png
        type: string
      svg:
        example: https://restcountries.eu/data/usa.svg
        type: string
    type: object
  v1.IDD:
    properties:
      root:
        example: "+1"
        type: string
      suffixes:
        example:
        - "201"
        - "202"
        items:
          type: string
        type: array
    type: object
  v1.Maps:
    properties:
      googleMaps:
        example: https://goo.gl/maps/...
        type: string
      openStreetMaps:
        example: https://www.openstreetmap.org/...
        type: string
    type: object
  v1.Name:
    properties:
      common:
        example: United States
        type: string
      official:
        example: United States of America
        type: string
    type: object
  v1.PostalCode:
    properties:
      format:
        example: '#####-####'
        type: string
      regex:
        example: ^\d{5}(-\d{4})?$
        type: string
    type: object
  v2.Airport:
    description: Airport represents the airport data.
    properties:
      comments:
        example:
        - ""
        items:
          type: string
        type: array
      continent:
        example: NA
        type: string
      elevation_ft:
        example: "136"
        type: string
      frequencies:
        items:
          $ref: '#/definitions/v2.AirportFrequency'
        type: array
      gps_code:
        example: TVSA
        type: string
      home_link:
        example: http://www.svgiadc.com
        type: string
      iata_code:
        example: SVD
        type: string
      id:
        example: "322383"
        type: string
      ident:
        example: TVSA
        type: string
      iso_country:
        example: VC
        type: string
      iso_region:
        example: VC-04
        type: string
      keywords:
        example: ""
        type: string
      latitude_deg:
        example: "13.156695"
        type: string
      local_code:
        example: ""
        type: string
      longitude_deg:
        example: "-61.149945"
        type: string
      municipality:
        example: Kingstown
        type: string
      name:
        example: Argyle International Airport
        type: string
      runways:
        items:
          $ref: '#/definitions/v2.AirportRunway'
        type: array
      scheduled_service:
        example: "yes"
        type: string
      type:
        example: medium_airport
        type: string
      wikipedia_link:
        example: https://en.m.wikipedia.org/wiki/Argyle_International_Airport
        type: string
    type: object
  v2.AirportFrequency:
    description: AirportFrequency represents the frequency data for an airport.
    properties:
      airport_ident:
        example: TVSA
        type: string
      airport_ref:
        example: "322383"
        type: string
      description:
        example: Argyle Approach
        type: string
      frequency_mhz:
        example: "120.8"
        type: string
      id:
        example: "322388"
        type: string
      type:
        example: APP
        type: string
    type: object
  v2.AirportRunway:
    description: AirportRunway represents the runway data for an airport.
    properties:
      airport_ident:
        example: TVSA
        type: string
      airport_ref:
        example: "322383"
        type: string
      closed:
        example: "0"
        type: string
      he_displaced_threshold_ft:
        example: "985"
        type: string
      he_elevation_ft:
        example: "52"
        type: string
      he_heading_degT:
        example: ""
        type: string
      he_ident:
        example: "22"
        type: string
      he_latitude_deg:
        example: ""
        type: string
      he_longitude_deg:
        example: ""
        type: string
      id:
        example: "322384"
        type: string
      le_displaced_threshold_ft:
        example: ""
        type: string
      le_elevation_ft:
        example: "136"
        type: string
      le_heading_degT:
        example: ""
        type: string
      le_ident:
        example: "04"
        type: string
      le_latitude_deg:
        example: ""
        type: string
      le_longitude_deg:
        example: ""
        type: string
      length_ft:
        example: "9000"
        type: string
      lighted:
        example: "1"
        type: string
      surface:
        example: ASP
        type: string
      width_ft:
        example: "148"
        type: string
    type: object
  v2.CountryAirports:
    description: CountryAirports represents the airport data for a country.
    properties:
      airports:
        items:
          $ref: '#/definitions/v2.Airport'
        type: array
      code:
        example: VC
        type: string
      continent:
        example: NA
        type: string
      id:
        example: "302756"
        type: string
      keywords:
        example: Airports in Saint Vincent and the Grenadines
        type: string
      name:
        example: Saint Vincent and the Grenadines
        type: string
      wikipedia_link:
        example: https://en.wikipedia.org/wiki/Saint_Vincent_and_the_Grenadines
        type: string
    type: object
  v2.ErrorResponse:
    description: ErrorResponse represents an error response.
    properties:
      message:
        example: Bad request
        type: string
    type: object
  v2.PassportResponse:
    description: PassportResponse represents the passport data response.
    properties:
      passport:
        example: USA
        type: string
      visas:
        additionalProperties:
          type: string
        type: object
    type: object
  v2.VisaRequirement:
    description: VisaRequirement represents the visa requirement between two countries.
    properties:
      from:
        example: USA
        type: string
      requirement:
        example: "90"
        type: string
      to:
        example: DEU
        type: string
    type: object
info:
  contact:
    email: support@doroad.ai
    name: Atlas API Support
    url: https://github.com/DoROAD-AI/atlas/issues
  description: A comprehensive REST API providing detailed country information and
    passport visa requirements worldwide. This modern, high-performance service offers
    extensive data about countries, including demographics, geography, international
    codes, and visa regulations for various passports.
  license:
    name: MIT
    url: https://github.com/DoROAD-AI/atlas/blob/main/LICENSE
  termsOfService: http://atlas.doroad.io/terms/
  title: Atlas - Geographic and Passport Data API by DoROAD
  version: "2.0"
paths:
  /airports:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all airports.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.CountryAirports'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get all airports
      tags:
      - Airports
  /airports/{code}:
    get:
      consumes:
      - application/json
      description: Retrieves an airport by its IATA or ICAO code.
      parameters:
      - description: Airport code (IATA or ICAO)
        in: path
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.Airport'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airport by code
      tags:
      - Airports
  /airports/country/{countryCode}:
    get:
      consumes:
      - application/json
      description: Retrieves all airports in a specific country.
      parameters:
      - description: Country code (e.g., VC)
        in: path
        name: countryCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.CountryAirports'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airports by country
      tags:
      - Airports
  /alpha:
    get:
      consumes:
      - application/json
      description: Get countries matching a list of codes (CCA2, CCN3, CCA3, or CIOC).
      parameters:
      - description: Comma-separated list of country codes (CCA2, CCN3, CCA3, CIOC)
        in: query
        name: codes
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by codes
      tags:
      - Countries
  /capital/{capital}:
    get:
      consumes:
      - application/json
      description: Get countries matching a capital city name.
      parameters:
      - description: Capital city name
        in: path
        name: capital
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by capital
      tags:
      - Countries
  /ccn3/{code}:
    get:
      consumes:
      - application/json
      description: Get details of a specific country by its numeric ISO code.
      parameters:
      - description: Numeric code (e.g., 840)
        in: path
        name: code
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Country'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get country by numeric ISO code (CCN3)
      tags:
      - Countries
  /countries:
    get:
      consumes:
      - application/json
      description: Get details of all countries, with optional filters.
      parameters:
      - description: Filter by independent status (true or false)
        in: query
        name: independent
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get all countries
      tags:
      - Countries
  /countries/{code}:
    get:
      consumes:
      - application/json
      description: Get details of a specific country by its code (CCA2 or CCA3).
      parameters:
      - description: Country code (CCA2 or CCA3)
        in: path
        name: code
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Country'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get country by code
      tags:
      - Countries
  /currency/{currency}:
    get:
      consumes:
      - application/json
      description: Get countries matching a currency code or name.
      parameters:
      - description: Currency code or name
        in: path
        name: currency
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by currency
      tags:
      - Countries
  /demonym/{demonym}:
    get:
      consumes:
      - application/json
      description: Get countries matching a demonym.
      parameters:
      - description: Demonym
        in: path
        name: demonym
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by demonym
      tags:
      - Countries
  /independent:
    get:
      consumes:
      - application/json
      description: Get countries filtered by independence. Defaults to status=true
        if not specified.
      parameters:
      - description: true or false. Defaults to 'true'
        in: query
        name: status
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by independence status
      tags:
      - Countries
  /lang/{language}:
    get:
      consumes:
      - application/json
      description: Get countries matching a language code or name.
      parameters:
      - description: Language code or name
        in: path
        name: language
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by language
      tags:
      - Countries
  /name/{name}:
    get:
      consumes:
      - application/json
      description: Get countries matching a name query (common or official). Use fullText=true
        for exact name match.
      parameters:
      - description: Country name (common or official)
        in: path
        name: name
        required: true
        type: string
      - description: Exact match for full name (true/false)
        in: query
        name: fullText
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by name
      tags:
      - Countries
  /passports/{passportCode}:
    get:
      consumes:
      - application/json
      description: Get visa requirement data for a specific passport.
      parameters:
      - description: Passport code (e.g., USA)
        in: path
        name: passportCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.PassportResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get passport data
      tags:
      - Passports
  /passports/{passportCode}/visas:
    get:
      consumes:
      - application/json
      description: Get visa requirements for all destinations for a specific passport.
      parameters:
      - description: Passport code (e.g., USA)
        in: path
        name: passportCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.PassportResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get visa requirements for a passport
      tags:
      - Passports
  /passports/visa:
    get:
      consumes:
      - application/json
      description: Get visa requirements for a passport holder from one country traveling
        to another.
      parameters:
      - description: Origin country code (e.g., USA)
        in: query
        name: fromCountry
        required: true
        type: string
      - description: Destination country code (e.g., DEU)
        in: query
        name: toCountry
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.VisaRequirement'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get visa requirements between two countries
      tags:
      - Passports
  /region/{region}:
    get:
      consumes:
      - application/json
      description: Get countries matching a region.
      parameters:
      - description: Region name
        in: path
        name: region
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by region
      tags:
      - Countries
  /subregion/{subregion}:
    get:
      consumes:
      - application/json
      description: Get countries matching a subregion.
      parameters:
      - description: Subregion name
        in: path
        name: subregion
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by subregion
      tags:
      - Countries
  /translation/{translation}:
    get:
      consumes:
      - application/json
      description: Get countries matching a translation.
      parameters:
      - description: Translation
        in: path
        name: translation
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by translation
      tags:
      - Countries
schemes:
- https
- http
swagger: "2.0"
