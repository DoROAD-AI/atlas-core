basePath: /v2
definitions:
  v1.CapitalInfo:
    properties:
      latlng:
        example:
        - 38.8951
        - 77.0364
        items:
          type: number
        type: array
    type: object
  v1.Car:
    properties:
      side:
        example: right
        type: string
      signs:
        example:
        - USA
        items:
          type: string
        type: array
    type: object
  v1.CoatOfArms:
    properties:
      png:
        example: https://mainfacts.com/media/images/coats_of_arms/us.png
        type: string
      svg:
        example: https://mainfacts.com/media/images/coats_of_arms/us.svg
        type: string
    type: object
  v1.Country:
    properties:
      altSpellings:
        items:
          type: string
        type: array
      area:
        example: 9372610
        type: number
      borders:
        items:
          type: string
        type: array
      capital:
        example:
        - Washington
        - ' D.C.'
        items:
          type: string
        type: array
      capitalInfo:
        $ref: '#/definitions/v1.CapitalInfo'
      car:
        $ref: '#/definitions/v1.Car'
      cca2:
        example: US
        type: string
      cca3:
        example: USA
        type: string
      ccn3:
        example: "840"
        type: string
      cioc:
        example: USA
        type: string
      coatOfArms:
        $ref: '#/definitions/v1.CoatOfArms'
      continents:
        items:
          type: string
        type: array
      currencies:
        $ref: '#/definitions/v1.Currencies'
      demonyms:
        $ref: '#/definitions/v1.Demonyms'
      fifa:
        example: USA
        type: string
      flag:
        example: "\U0001F1FA\U0001F1F8"
        type: string
      flags:
        $ref: '#/definitions/v1.Flags'
      gini:
        additionalProperties:
          type: number
        type: object
      idd:
        $ref: '#/definitions/v1.IDD'
      independent:
        example: true
        type: boolean
      landlocked:
        example: false
        type: boolean
      languages:
        additionalProperties:
          type: string
        type: object
      latlng:
        items:
          type: number
        type: array
      maps:
        $ref: '#/definitions/v1.Maps'
      name:
        $ref: '#/definitions/v1.Name'
      population:
        example: 334805269
        type: integer
      postalCode:
        $ref: '#/definitions/v1.PostalCode'
      region:
        example: Americas
        type: string
      startOfWeek:
        example: sunday
        type: string
      status:
        example: officially-assigned
        type: string
      subregion:
        example: North America
        type: string
      timezones:
        items:
          type: string
        type: array
      tld:
        items:
          type: string
        type: array
      translations:
        additionalProperties:
          properties:
            common:
              type: string
            official:
              type: string
          type: object
        type: object
      unMember:
        example: true
        type: boolean
    type: object
  v1.Currencies:
    additionalProperties:
      $ref: '#/definitions/v1.CurrencyInfo'
    type: object
  v1.CurrencyInfo:
    properties:
      name:
        example: US Dollar
        type: string
      symbol:
        example: $
        type: string
    type: object
  v1.DemonymInfo:
    properties:
      f:
        example: American
        type: string
      m:
        example: American
        type: string
    type: object
  v1.Demonyms:
    properties:
      eng:
        $ref: '#/definitions/v1.DemonymInfo'
      fra:
        $ref: '#/definitions/v1.DemonymInfo'
    type: object
  v1.ErrorResponse:
    properties:
      message:
        example: Bad request
        type: string
    type: object
  v1.Flags:
    properties:
      alt:
        example: Flag of the United States
        type: string
      png:
        example: https://restcountries.eu/data/usa.png
        type: string
      svg:
        example: https://restcountries.eu/data/usa.svg
        type: string
    type: object
  v1.IDD:
    properties:
      root:
        example: "+1"
        type: string
      suffixes:
        example:
        - "201"
        - "202"
        items:
          type: string
        type: array
    type: object
  v1.Maps:
    properties:
      googleMaps:
        example: https://goo.gl/maps/...
        type: string
      openStreetMaps:
        example: https://www.openstreetmap.org/...
        type: string
    type: object
  v1.Name:
    properties:
      common:
        example: United States
        type: string
      official:
        example: United States of America
        type: string
    type: object
  v1.PostalCode:
    properties:
      format:
        example: '#####-####'
        type: string
      regex:
        example: ^\d{5}(-\d{4})?$
        type: string
    type: object
  v2.Airline:
    description: Airline represents data for a single airline.
    properties:
      active:
        example: "Y"
        type: string
      airline_id:
        example: 28
        type: integer
      alias:
        example: \N
        type: string
      callsign:
        example: ASIANA
        type: string
      country:
        example: Republic of Korea
        type: string
      iata:
        example: OZ
        type: string
      icao:
        example: AAR
        type: string
      name:
        example: Asiana Airlines
        type: string
    type: object
  v2.Airport:
    description: Airport represents the airport data.
    properties:
      comments:
        example:
        - ""
        items:
          type: string
        type: array
      continent:
        example: NA
        type: string
      elevation_ft:
        example: "136"
        type: string
      frequencies:
        items:
          $ref: '#/definitions/v2.AirportFrequency'
        type: array
      gps_code:
        example: TVSA
        type: string
      home_link:
        example: http://www.svgiadc.com
        type: string
      iata_code:
        example: SVD
        type: string
      id:
        example: "322383"
        type: string
      ident:
        example: TVSA
        type: string
      iso_country:
        example: VC
        type: string
      iso_region:
        example: VC-04
        type: string
      keywords:
        example: ""
        type: string
      latitude_deg:
        example: "13.156695"
        type: string
      local_code:
        example: ""
        type: string
      longitude_deg:
        example: "-61.149945"
        type: string
      municipality:
        example: Kingstown
        type: string
      name:
        example: Argyle International Airport
        type: string
      runways:
        items:
          $ref: '#/definitions/v2.AirportRunway'
        type: array
      scheduled_service:
        example: "yes"
        type: string
      type:
        example: medium_airport
        type: string
      wikipedia_link:
        example: https://en.m.wikipedia.org/wiki/Argyle_International_Airport
        type: string
    type: object
  v2.AirportDistance:
    description: AirportDistance represents the distance between two airports.
    properties:
      airport1:
        example: TVSA
        type: string
      airport2:
        example: TVSB
        type: string
      distance_km:
        example: 1234.5
        type: number
      distance_miles:
        example: 767.1
        type: number
    type: object
  v2.AirportFrequency:
    description: AirportFrequency represents the frequency data for an airport.
    properties:
      airport_ident:
        example: TVSA
        type: string
      airport_ref:
        example: "322383"
        type: string
      description:
        example: Argyle Approach
        type: string
      frequency_mhz:
        example: "120.8"
        type: string
      id:
        example: "322388"
        type: string
      type:
        example: APP
        type: string
    type: object
  v2.AirportRunway:
    description: AirportRunway represents the runway data for an airport.
    properties:
      airport_ident:
        example: TVSA
        type: string
      airport_ref:
        example: "322383"
        type: string
      closed:
        example: "0"
        type: string
      he_displaced_threshold_ft:
        example: "985"
        type: string
      he_elevation_ft:
        example: "52"
        type: string
      he_heading_degT:
        example: ""
        type: string
      he_ident:
        example: "22"
        type: string
      he_latitude_deg:
        example: ""
        type: string
      he_longitude_deg:
        example: ""
        type: string
      id:
        example: "322384"
        type: string
      le_displaced_threshold_ft:
        example: ""
        type: string
      le_elevation_ft:
        example: "136"
        type: string
      le_heading_degT:
        example: ""
        type: string
      le_ident:
        example: "04"
        type: string
      le_latitude_deg:
        example: ""
        type: string
      le_longitude_deg:
        example: ""
        type: string
      length_ft:
        example: "9000"
        type: string
      lighted:
        example: "1"
        type: string
      surface:
        example: ASP
        type: string
      width_ft:
        example: "148"
        type: string
    type: object
  v2.CommonAccessResult:
    properties:
      country_code:
        example: MEX
        type: string
      country_name:
        example: Mexico
        type: string
      requirement_1:
        example: Visa not required
        type: string
      requirement_2:
        example: Visa not required
        type: string
    type: object
  v2.CountryAirports:
    description: CountryAirports represents the airport data for a country.
    properties:
      airports:
        items:
          $ref: '#/definitions/v2.Airport'
        type: array
      code:
        example: VC
        type: string
      continent:
        example: NA
        type: string
      id:
        example: "302756"
        type: string
      keywords:
        example: Airports in Saint Vincent and the Grenadines
        type: string
      name:
        example: Saint Vincent and the Grenadines
        type: string
      wikipedia_link:
        example: https://en.wikipedia.org/wiki/Saint_Vincent_and_the_Grenadines
        type: string
    type: object
  v2.CountryCodes:
    properties:
      iso2:
        example: VC
        type: string
      iso3:
        example: VCT
        type: string
      region:
        example: Americas
        type: string
      subregion:
        example: Caribbean
        type: string
    type: object
  v2.CountryVisaInfo:
    properties:
      codes:
        $ref: '#/definitions/v2.CountryCodes'
      name:
        example: Saint Vincent and the Grenadines
        type: string
      passport_index:
        $ref: '#/definitions/v2.PassportIndex'
      requirements:
        items:
          $ref: '#/definitions/v2.VisaRequirementEntry'
        type: array
      visa_map:
        $ref: '#/definitions/v2.VisaMap'
      wiki_url:
        example: https://en.wikipedia.org/wiki/Visa_requirements_for_Saint_Vincent_and_the_Grenadines_citizens
        type: string
    type: object
  v2.DestinationVisaRequirement:
    properties:
      allowed_stay:
        example: 90 days
        type: string
      iso2:
        example: US
        type: string
      iso3:
        example: USA
        type: string
      notes:
        example: ""
        type: string
      passport_country:
        example: United States
        type: string
      visa_requirement:
        example: Visa not required
        type: string
    type: object
  v2.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  v2.FlightTrack:
    properties:
      callsign:
        example: SVA35
        type: string
      endTime:
        example: 1674349200
        type: integer
      icao24:
        example: "48585773"
        type: string
      path:
        items:
          $ref: '#/definitions/v2.Waypoint'
        type: array
      startTime:
        example: 1674345600
        type: integer
    type: object
  v2.OpenSkyStates:
    properties:
      states:
        items:
          $ref: '#/definitions/v2.StateVector'
        type: array
      time:
        example: 1674345600
        type: integer
    type: object
  v2.PassportIndex:
    properties:
      ranking:
        description: Use pointer for nullable int
        example: 25
        type: integer
      ranking_source:
        example: Henley Passport Index
        type: string
      visa_free_count:
        example: 157
        type: integer
    type: object
  v2.PassportResponse:
    description: PassportResponse represents the passport data response.
    properties:
      passport:
        example: USA
        type: string
      visas:
        additionalProperties:
          type: string
        type: object
    type: object
  v2.SortedVisaDestinationInfo:
    properties:
      destination_country:
        example: France
        type: string
      requirements:
        items:
          $ref: '#/definitions/v2.DestinationVisaRequirement'
        type: array
      sorted_by:
        example: visa_requirement
        type: string
    type: object
  v2.StateVector:
    properties:
      baro_altitude:
        example: 11277.6
        type: number
      callsign:
        example: SVA35
        type: string
      category:
        example: 1
        type: integer
      geo_altitude:
        example: 11887.2
        type: number
      icao24:
        example: "48585773"
        type: string
      last_contact:
        example: 1674345600
        type: integer
      latitude:
        example: 40.641766
        type: number
      longitude:
        example: -73.778925
        type: number
      on_ground:
        example: false
        type: boolean
      origin_country:
        example: Saudi Arabia
        type: string
      position_source:
        example: 0
        type: integer
      sensors:
        items:
          type: integer
        type: array
      spi:
        example: false
        type: boolean
      squawk:
        example: "2200"
        type: string
      time_position:
        example: 1674345600
        type: integer
      true_track:
        example: 285.7
        type: number
      velocity:
        example: 245.34
        type: number
      vertical_rate:
        example: 0
        type: number
    type: object
  v2.VisaComparisonResult:
    description: VisaComparisonResult represents the result of comparing visa requirements.
    properties:
      common_access:
        items:
          $ref: '#/definitions/v2.CommonAccessResult'
        type: array
      country1:
        example: USA
        type: string
      country2:
        example: CAN
        type: string
      requirements:
        additionalProperties:
          type: string
        description: 'e.g. "USA_to_CAN" : "Visa required"'
        type: object
    type: object
  v2.VisaData:
    additionalProperties:
      $ref: '#/definitions/v2.CountryVisaInfo'
    type: object
  v2.VisaDestinationInfo:
    properties:
      destination_country:
        example: France
        type: string
      requirements:
        items:
          $ref: '#/definitions/v2.DestinationVisaRequirement'
        type: array
    type: object
  v2.VisaMap:
    properties:
      legend:
        additionalProperties:
          type: string
        type: object
      map_url:
        example: https://upload.wikimedia.org/wikipedia/commons/thumb/b/b0/Visa_requirements_for_Saint_Vincent_and_the_Grenadines_citizens.png/800px-Visa_requirements_for_Saint_Vincent_and_the_Grenadines_citizens.png
        type: string
    type: object
  v2.VisaRequirement:
    description: VisaRequirement represents the visa requirement between two countries.
    properties:
      from:
        example: USA
        type: string
      requirement:
        example: "90"
        type: string
      to:
        example: DEU
        type: string
    type: object
  v2.VisaRequirementEntry:
    properties:
      allowed_stay:
        example: ""
        type: string
      country:
        example: Afghanistan
        type: string
      iso2:
        example: AF
        type: string
      iso3:
        example: AFG
        type: string
      notes:
        example: ""
        type: string
      region:
        example: Asia
        type: string
      subregion:
        example: Southern Asia
        type: string
      visa_requirement:
        example: Visa required
        type: string
    type: object
  v2.Waypoint:
    properties:
      baro_altitude:
        example: 10000
        type: number
      latitude:
        example: 40.7789
        type: number
      longitude:
        example: -73.9692
        type: number
      on_ground:
        example: false
        type: boolean
      time:
        example: 1674345600
        type: integer
      true_track:
        example: 270
        type: number
    type: object
info:
  contact:
    email: support@doroad.ai
    name: Atlas API Support
    url: https://github.com/DoROAD-AI/atlas/issues
  description: Atlas is DoROAD's flagship Global Travel and Aviation Intelligence
    Data API. Version 2.0 represents a significant leap forward, providing a comprehensive,
    high-performance RESTful API for accessing detailed country information, extensive
    airport data, and up-to-date passport visa requirements worldwide. This service
    offers extensive data about countries (demographics, geography, international
    codes, etc.), airports, and visa regulations for various passports.
  license:
    name: MIT / Proprietary
    url: https://github.com/DoROAD-AI/atlas/blob/main/LICENSE
  termsOfService: http://atlas.doroad.io/terms/
  title: Atlas - Global Travel and Aviation Intelligence Data API by DoROAD
  version: "2.0"
paths:
  /airlines:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all airlines.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.Airline'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get all airlines
      tags:
      - Airlines
  /airlines/active:
    get:
      consumes:
      - application/json
      description: Retrieves all airlines that are currently active.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.Airline'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get active airlines
      tags:
      - Airlines
  /airlines/country/{countryName}:
    get:
      consumes:
      - application/json
      description: Retrieves all airlines based in a specific country.
      parameters:
      - description: Country name
        in: path
        name: countryName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.Airline'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airlines by country
      tags:
      - Airlines
  /airlines/iata/{iataCode}:
    get:
      consumes:
      - application/json
      description: Retrieves an airline by its IATA code.
      parameters:
      - description: IATA code
        in: path
        name: iataCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.Airline'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airline by IATA code
      tags:
      - Airlines
  /airlines/icao/{icaoCode}:
    get:
      consumes:
      - application/json
      description: Retrieves an airline by its ICAO code.
      parameters:
      - description: ICAO code
        in: path
        name: icaoCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.Airline'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airline by ICAO code
      tags:
      - Airlines
  /airlines/id/{airlineID}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific airline by its ID.
      parameters:
      - description: Airline ID
        in: path
        name: airlineID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.Airline'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airline by ID
      tags:
      - Airlines
  /airlines/search:
    get:
      consumes:
      - application/json
      description: Performs a flexible search for airlines based on a query string.
      parameters:
      - description: Search string (can match airline name, country, ICAO/IATA code,
          etc.)
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.Airline'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Search airlines
      tags:
      - Airlines
  /airports:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all airports for all countries (keyed by each
        country's alpha-2 code).
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/v2.CountryAirports'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get all airports
      tags:
      - Airports
  /airports/{countryCode}:
    get:
      consumes:
      - application/json
      description: Retrieves all airports in a specific country. The country code
        can be in any recognized format (CCA2, CCA3, CCN3, CIOC, FIFA, or alt spelling).
      parameters:
      - description: Country code (e.g., VC, VCT, 670, etc.)
        in: path
        name: countryCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.CountryAirports'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airports by country
      tags:
      - Airports
  /airports/{countryCode}/{airportIdent}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific airport within a country by matching the airport's
        ICAO or IATA code. The country code can be in any recognized format (CCA2,
        CCA3, CCN3, CIOC, etc.).
      parameters:
      - description: Country code (e.g., VC, VCT, 670, etc.)
        in: path
        name: countryCode
        required: true
        type: string
      - description: Airport Ident (ICAO) or IATA code
        in: path
        name: airportIdent
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.Airport'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get a single airport by identifier
      tags:
      - Airports
  /airports/{countryCode}/{airportIdent}/frequencies:
    get:
      consumes:
      - application/json
      description: Retrieves communication frequencies used at a specific airport.
      parameters:
      - description: Country code (e.g., VC, VCT, 670, etc.)
        in: path
        name: countryCode
        required: true
        type: string
      - description: Airport Ident (ICAO) or IATA code
        in: path
        name: airportIdent
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.AirportFrequency'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airport frequencies
      tags:
      - Airports
  /airports/{countryCode}/{airportIdent}/runways:
    get:
      consumes:
      - application/json
      description: Retrieves detailed runway information for a specific airport.
      parameters:
      - description: Country code (e.g., VC, VCT, 670, etc.)
        in: path
        name: countryCode
        required: true
        type: string
      - description: Airport Ident (ICAO) or IATA code
        in: path
        name: airportIdent
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.AirportRunway'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airport runways
      tags:
      - Airports
  /airports/by-code/{airportCode}:
    get:
      consumes:
      - application/json
      description: Retrieves a specific airport by its ICAO or IATA code.
      parameters:
      - description: Airport ICAO or IATA code
        in: path
        name: airportCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.Airport'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airport by ICAO or IATA code
      tags:
      - Airports
  /airports/distance:
    get:
      consumes:
      - application/json
      description: Calculates the distance (in kilometers and miles) between two airports.
      parameters:
      - description: ICAO or IATA code of the first airport
        in: query
        name: airport1
        required: true
        type: string
      - description: ICAO or IATA code of the second airport
        in: query
        name: airport2
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.AirportDistance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Calculate distance between two airports
      tags:
      - Airports
  /airports/keyword/{keyword}:
    get:
      consumes:
      - application/json
      description: Retrieves all airports associated with a specific keyword.
      parameters:
      - description: Keyword to search for
        in: path
        name: keyword
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.Airport'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airports by keyword
      tags:
      - Airports
  /airports/municipality/{municipalityName}:
    get:
      consumes:
      - application/json
      description: Retrieves all airports within a specific municipality.
      parameters:
      - description: Municipality name
        in: path
        name: municipalityName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.Airport'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airports by municipality
      tags:
      - Airports
  /airports/radius:
    get:
      consumes:
      - application/json
      description: Retrieves all airports within a specified radius of a given latitude/longitude
        coordinate.
      parameters:
      - description: Latitude of the center point
        in: query
        name: latitude
        required: true
        type: number
      - description: Longitude of the center point
        in: query
        name: longitude
        required: true
        type: number
      - description: Radius in kilometers
        in: query
        name: radius
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.Airport'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airports within a radius
      tags:
      - Airports
  /airports/region/{isoRegion}:
    get:
      consumes:
      - application/json
      description: Retrieves all airports within a specific ISO region.
      parameters:
      - description: ISO region code (e.g., VC-04)
        in: path
        name: isoRegion
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.Airport'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airports by ISO region
      tags:
      - Airports
  /airports/scheduled:
    get:
      consumes:
      - application/json
      description: Retrieves all airports that have scheduled airline service.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.Airport'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airports with scheduled service
      tags:
      - Airports
  /airports/search:
    get:
      consumes:
      - application/json
      description: Performs a flexible search for airports based on a query string.
      parameters:
      - description: Search string (can match airport name, city, ICAO/IATA code,
          etc.)
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.Airport'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Search airports
      tags:
      - Airports
  /airports/type/{airportType}:
    get:
      consumes:
      - application/json
      description: Retrieves all airports of a specific type.
      parameters:
      - description: Airport type (e.g., medium_airport, closed)
        in: path
        name: airportType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.Airport'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get airports by type
      tags:
      - Airports
  /alpha:
    get:
      consumes:
      - application/json
      description: Get countries matching a list of codes (CCA2, CCN3, CCA3, or CIOC).
      parameters:
      - description: Comma-separated list of country codes (CCA2, CCN3, CCA3, CIOC)
        in: query
        name: codes
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by codes
      tags:
      - Countries
  /capital/{capital}:
    get:
      consumes:
      - application/json
      description: Get countries matching a capital city name.
      parameters:
      - description: Capital city name
        in: path
        name: capital
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by capital
      tags:
      - Countries
  /ccn3/{code}:
    get:
      consumes:
      - application/json
      description: Get details of a specific country by its numeric ISO code.
      parameters:
      - description: Numeric code (e.g., 840)
        in: path
        name: code
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Country'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get country by numeric ISO code (CCN3)
      tags:
      - Countries
  /countries:
    get:
      consumes:
      - application/json
      description: Get details of all countries, with optional filters.
      parameters:
      - description: Filter by independent status (true or false)
        in: query
        name: independent
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get all countries
      tags:
      - Countries
  /countries/{code}:
    get:
      consumes:
      - application/json
      description: Get details of a specific country by its code (CCA2 or CCA3).
      parameters:
      - description: Country code (CCA2 or CCA3)
        in: path
        name: code
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Country'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get country by code
      tags:
      - Countries
  /currency/{currency}:
    get:
      consumes:
      - application/json
      description: Get countries matching a currency code or name.
      parameters:
      - description: Currency code or name
        in: path
        name: currency
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by currency
      tags:
      - Countries
  /demonym/{demonym}:
    get:
      consumes:
      - application/json
      description: Get countries matching a demonym.
      parameters:
      - description: Demonym
        in: path
        name: demonym
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by demonym
      tags:
      - Countries
  /flights/aircraft/{icao24}:
    get:
      description: Retrieves flights for [icao24] in [begin, end], up to 30 days.
      parameters:
      - description: ICAO24 address (hex)
        in: path
        name: icao24
        required: true
        type: string
      - description: Start time (Unix, RFC3339, or relative)
        in: query
        name: begin
        required: true
        type: string
      - description: End time (Unix, RFC3339, or relative)
        in: query
        name: end
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Enhanced flight data + boundary times
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get flights by aircraft [like Python get_flights_by_aircraft]
      tags:
      - Flights
  /flights/arrivals/{airport}:
    get:
      description: Retrieves flights that arrived at [airport] in [begin, end], up
        to 7 days.
      parameters:
      - description: ICAO code of airport
        in: path
        name: airport
        required: true
        type: string
      - description: Start time (Unix, RFC3339, or relative)
        in: query
        name: begin
        required: true
        type: string
      - description: End time (Unix, RFC3339, or relative)
        in: query
        name: end
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Enhanced flight data + boundary times
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get arrivals by airport [like Python get_arrivals_by_airport]
      tags:
      - Flights
  /flights/departures/{airport}:
    get:
      description: Retrieves flights that departed [airport] in [begin, end], up to
        7 days.
      parameters:
      - description: ICAO code of airport
        in: path
        name: airport
        required: true
        type: string
      - description: Start time (Unix, RFC3339, or relative)
        in: query
        name: begin
        required: true
        type: string
      - description: End time (Unix, RFC3339, or relative)
        in: query
        name: end
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Enhanced flight data + boundary times
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get departures by airport [like Python get_departures_by_airport]
      tags:
      - Flights
  /flights/interval:
    get:
      description: Retrieves flights for a short interval [begin, end], max 2 hours.
      parameters:
      - description: Start time (Unix, RFC3339, or relative)
        in: query
        name: begin
        required: true
        type: string
      - description: End time (Unix, RFC3339, or relative)
        in: query
        name: end
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Enhanced flight data + boundary times
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get flights from interval [like Python get_flights_from_interval]
      tags:
      - Flights
  /flights/my-states:
    get:
      description: Requires Basic Auth. Retrieves the state vectors from your own
        sensors only.
      parameters:
      - description: Time can be Unix, RFC3339, or negative/relative (default=0 =>
          now)
        in: query
        name: time
        type: string
      - description: ICAO24 filter
        in: query
        name: icao24
        type: string
      - description: Sensor serial(s)
        in: query
        name: serials
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.OpenSkyStates'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "401":
          description: Unauthorized if no username/password configured
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get states for your own sensors [like Python get_my_states]
      tags:
      - Flights
  /flights/states/all:
    get:
      description: 'Retrieves the state vectors for aircraft at a given time (or 0
        for "now"). Optional: filter by icao24 or bounding box.'
      parameters:
      - description: Time can be Unix, RFC3339, or negative/relative (default=0 =>
          now)
        in: query
        name: time
        type: string
      - description: Single or comma-separated ICAO24 address(es)
        in: query
        name: icao24
        type: string
      - description: min_lat,max_lat,min_lon,max_lon [4 floats]
        in: query
        name: bbox
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.OpenSkyStates'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get aircraft states (all) [like Python get_states]
      tags:
      - Flights
  /flights/track:
    get:
      description: Retrieves the trajectory for an aircraft [icao24] at time t. If
        t=0 => live track.
      parameters:
      - description: ICAO24 address
        in: query
        name: icao24
        required: true
        type: string
      - description: Time can be Unix, RFC3339, or negative/relative (0 => live track)
        in: query
        name: time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.FlightTrack'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get flight track by aircraft [like Python get_track_by_aircraft]
      tags:
      - Flights
  /independent:
    get:
      consumes:
      - application/json
      description: Get countries filtered by independence. Defaults to status=true
        if not specified.
      parameters:
      - description: true or false. Defaults to 'true'
        in: query
        name: status
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by independence status
      tags:
      - Countries
  /lang/{language}:
    get:
      consumes:
      - application/json
      description: Get countries matching a language code or name.
      parameters:
      - description: Language code or name
        in: path
        name: language
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by language
      tags:
      - Countries
  /name/{name}:
    get:
      consumes:
      - application/json
      description: Get countries matching a name query (common or official). Use fullText=true
        for exact name match.
      parameters:
      - description: Country name (common or official)
        in: path
        name: name
        required: true
        type: string
      - description: Exact match for full name (true/false)
        in: query
        name: fullText
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by name
      tags:
      - Countries
  /passports/{passportCode}:
    get:
      consumes:
      - application/json
      description: Get visa requirement data for a specific passport.
      parameters:
      - description: Passport code (e.g., USA, US, 840, etc.)
        in: path
        name: passportCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.PassportResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get passport data
      tags:
      - Passports
  /passports/{passportCode}/visa-details/{destinationCode}:
    get:
      consumes:
      - application/json
      description: Provides specific visa requirement details (duration, type, etc.)
        for a given passport and destination.
      parameters:
      - description: Passport code (e.g., USA, US, 840, etc.)
        in: path
        name: passportCode
        required: true
        type: string
      - description: Destination country code (e.g., DEU, DE, 276, etc.)
        in: path
        name: destinationCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.VisaRequirement'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get detailed visa requirements for a passport and destination
      tags:
      - Passports
  /passports/compare:
    get:
      consumes:
      - application/json
      description: Compares visa requirements for a list of passports to a single
        destination.
      parameters:
      - collectionFormat: csv
        description: Comma-separated list of passport codes (e.g., USA,DEU,JPN)
        in: query
        items:
          type: string
        name: passports
        required: true
        type: array
      - description: Destination country code (e.g., FRA)
        in: query
        name: destination
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/v2.VisaRequirement'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Compare visa requirements for multiple passports to a single destination
      tags:
      - Passports
  /region/{region}:
    get:
      consumes:
      - application/json
      description: Get countries matching a region.
      parameters:
      - description: Region name
        in: path
        name: region
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by region
      tags:
      - Countries
  /search:
    get:
      consumes:
      - application/json
      description: Performs a comprehensive search across all data types (countries,
        airports) based on query parameters.
      parameters:
      - description: Type of data to search for (country, airport). If omitted or
          set to 'all', searches across all data types.
        in: query
        name: type
        type: string
      - description: Name of the country or airport
        in: query
        name: name
        type: string
      - description: Region of the country
        in: query
        name: region
        type: string
      - description: Subregion of the country
        in: query
        name: subregion
        type: string
      - description: Country code Alpha-2
        in: query
        name: cca2
        type: string
      - description: Country code Alpha-3
        in: query
        name: cca3
        type: string
      - description: Country code Numeric
        in: query
        name: ccn3
        type: string
      - description: Capital city of the country
        in: query
        name: capital
        type: string
      - description: Airport Ident code (e.g., ICAO code)
        in: query
        name: ident
        type: string
      - description: Airport IATA code
        in: query
        name: iata_code
        type: string
      - description: ISO country code for airports
        in: query
        name: iso_country
        type: string
      - description: ISO region code for airports
        in: query
        name: iso_region
        type: string
      - description: Municipality of the airport
        in: query
        name: municipality
        type: string
      - description: Type of the airport
        in: query
        name: airport_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Super Type Query
      tags:
      - Search
  /subregion/{subregion}:
    get:
      consumes:
      - application/json
      description: Get countries matching a subregion.
      parameters:
      - description: Subregion name
        in: path
        name: subregion
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by subregion
      tags:
      - Countries
  /translation/{translation}:
    get:
      consumes:
      - application/json
      description: Get countries matching a translation.
      parameters:
      - description: Translation
        in: path
        name: translation
        required: true
        type: string
      - description: Comma-separated list of fields to include in the response
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1.Country'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1.ErrorResponse'
      summary: Get countries by translation
      tags:
      - Countries
  /visas:
    get:
      consumes:
      - application/json
      description: Returns the entire visa dataset for all countries.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.VisaData'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get all visa data
      tags:
      - Visas
  /visas/{countryCode}:
    get:
      consumes:
      - application/json
      description: Retrieves detailed visa and entry requirements for citizens of
        a specific country. Accepts ISO2, ISO3, or the internal map key.
      parameters:
      - description: Country code (ISO2, ISO3, or mapped key)
        in: path
        name: countryCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.CountryVisaInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get visa requirements for a country
      tags:
      - Visas
  /visas/{countryCode}/filtered:
    get:
      consumes:
      - application/json
      description: Retrieves visa requirements for a specific country, filtered by
        various criteria (e.g., visa_requirement=, region=, subregion=, notes=, destination=).
      parameters:
      - description: Country code (ISO2, ISO3)
        in: path
        name: countryCode
        required: true
        type: string
      - description: e.g., 'Visa required', 'Visa not required'
        in: query
        name: visa_requirement
        type: string
      - description: e.g., '90 days'
        in: query
        name: allowed_stay
        type: string
      - description: case-insensitive substring match in the 'notes' field
        in: query
        name: notes
        type: string
      - description: e.g., 'Asia'
        in: query
        name: region
        type: string
      - description: e.g., 'Southern Asia'
        in: query
        name: subregion
        type: string
      - description: Destination country code (ISO2 or ISO3) - to see requirement
          for that specific destination.
        in: query
        name: destination
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.VisaRequirementEntry'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get filtered visa requirements for a country
      tags:
      - Visas
  /visas/common-visa-free:
    get:
      consumes:
      - application/json
      description: Determines the common countries that a set of passports can access
        visa-free (using passports.json).
      parameters:
      - collectionFormat: csv
        description: Comma-separated list of passport codes (e.g., USA,DEU,JPN)
        in: query
        items:
          type: string
        name: passports
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Find common visa-free destinations for multiple passports (basic)
      tags:
      - Visas
  /visas/compare:
    get:
      consumes:
      - application/json
      description: Compares the visa requirements for citizens of two countries, showing
        each to the other, plus listing common countries both can access without a
        standard visa.
      parameters:
      - description: First country code (ISO2, ISO3, or mapped key)
        in: query
        name: country1
        required: true
        type: string
      - description: Second country code (ISO2, ISO3, or mapped key)
        in: query
        name: country2
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.VisaComparisonResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Compare visa requirements between two countries
      tags:
      - Visas
  /visas/destination/{destinationCode}:
    get:
      consumes:
      - application/json
      description: Retrieves the visa requirements *for* a specific destination country
        (who can enter visa-free, who needs a visa, etc.).
      parameters:
      - description: Destination country code (ISO2, ISO3, or mapped key)
        in: path
        name: destinationCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.VisaDestinationInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get visa requirements *for* a destination country
      tags:
      - Visas
  /visas/destination/{destinationCode}/sorted:
    get:
      consumes:
      - application/json
      description: Retrieves visa requirements for a destination, sorted by a specified
        field (passport_country, visa_requirement, allowed_stay, iso2, iso3).
      parameters:
      - description: Destination country code (ISO2, ISO3, or mapped key)
        in: path
        name: destinationCode
        required: true
        type: string
      - description: Field to sort by
        enum:
        - passport_country
        - visa_requirement
        - allowed_stay
        - iso2
        - iso3
        in: query
        name: sort_by
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.SortedVisaDestinationInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get sorted visa requirements for a destination
      tags:
      - Visas
  /visas/passport/{passportCode}:
    get:
      consumes:
      - application/json
      description: Get basic visa requirement data for a specific passport (using
        passports.json).
      parameters:
      - description: Passport code (e.g., USA, US, 840, etc.)
        in: path
        name: passportCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.PassportResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get passport data (basic)
      tags:
      - Visas
  /visas/passport/{passportCode}/all:
    get:
      consumes:
      - application/json
      description: Get visa requirements for all destinations for a specific passport
        (using passports.json).
      parameters:
      - description: Passport code (e.g., USA, US, 840, etc.)
        in: path
        name: passportCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.PassportResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get all visa requirements for a passport (basic)
      tags:
      - Visas
  /visas/passport/{passportCode}/e-visa:
    get:
      consumes:
      - application/json
      description: Retrieves a list of countries where the given passport holder can
        apply for an e-visa (using passports.json).
      parameters:
      - description: Passport code (e.g., USA, US, 840, etc.)
        in: path
        name: passportCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get e-visa destinations for a passport (basic)
      tags:
      - Visas
  /visas/passport/{passportCode}/visa-free:
    get:
      consumes:
      - application/json
      description: Retrieves a list of countries where the given passport holder can
        travel visa-free (using passports.json).
      parameters:
      - description: Passport code (e.g., USA, US, 840, etc.)
        in: path
        name: passportCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get visa-free destinations for a passport (basic)
      tags:
      - Visas
  /visas/passport/{passportCode}/visa-on-arrival:
    get:
      consumes:
      - application/json
      description: Retrieves a list of countries where the given passport holder can
        obtain a visa on arrival (using passports.json).
      parameters:
      - description: Passport code (e.g., USA, US, 840, etc.)
        in: path
        name: passportCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get visa-on-arrival destinations for a passport (basic)
      tags:
      - Visas
  /visas/passport/{passportCode}/visa-required:
    get:
      consumes:
      - application/json
      description: Retrieves a list of countries where the given passport holder requires
        a visa before arrival (using passports.json).
      parameters:
      - description: Passport code (e.g., USA, US, 840, etc.)
        in: path
        name: passportCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get visa-required destinations for a passport (basic)
      tags:
      - Visas
  /visas/ranking:
    get:
      consumes:
      - application/json
      description: Returns a ranked list of passports based on the number of countries
        they can access visa-free or with visa-on-arrival (using passports.json).
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
      summary: Get a ranked list of passports based on visa-free access (basic)
      tags:
      - Visas
  /visas/reciprocal/{countryCode1}/{countryCode2}:
    get:
      consumes:
      - application/json
      description: Checks the visa requirements both ways between two countries.
      parameters:
      - description: First country code (e.g., USA, US, 840, etc.)
        in: path
        name: countryCode1
        required: true
        type: string
      - description: Second country code (e.g., DEU, DE, 276, etc.)
        in: path
        name: countryCode2
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/v2.VisaRequirement'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get reciprocal visa requirements between two countries
      tags:
      - Visas
  /visas/requirements:
    get:
      consumes:
      - application/json
      description: Get visa requirements for a passport holder from one country traveling
        to another (using passports.json).
      parameters:
      - description: Origin country code (e.g., USA, US, 840, etc.)
        in: query
        name: fromCountry
        required: true
        type: string
      - description: Destination country code (e.g., DEU, DE, 276, etc.)
        in: query
        name: toCountry
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v2.VisaRequirement'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Get visa requirements between two countries (basic)
      tags:
      - Visas
  /visas/search:
    get:
      consumes:
      - application/json
      description: Performs flexible filtering on the entire dataset of countries
        by region, subregion, name, or minVisaFree, etc. Also supports sorting and
        pagination.
      parameters:
      - description: Search in country Name (case-insensitive substring)
        in: query
        name: name
        type: string
      - description: Filter by region (exact match)
        in: query
        name: region
        type: string
      - description: Filter by subregion (exact match)
        in: query
        name: subregion
        type: string
      - description: Minimum visa-free count (PassportIndex.VisaFreeCount >= ?)
        in: query
        name: minVisaFree
        type: integer
      - description: Sort by 'name', 'region', or 'visa_free_count' (defaults to 'name')
        in: query
        name: sortBy
        type: string
      - description: asc or desc (default asc)
        in: query
        name: sortOrder
        type: string
      - description: Limit number of results (0 = no limit)
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v2.CountryVisaInfo'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v2.ErrorResponse'
      summary: Search across all country visa data
      tags:
      - Visas
schemes:
- https
- http
swagger: "2.0"
